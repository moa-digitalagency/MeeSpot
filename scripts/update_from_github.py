#!/usr/bin/env python3
#
# MeetSpot - Script de mise √† jour depuis GitHub
# MOA Digital Agency LLC
# Par : Aisance KALONJI
# Mail : moa@myoneart.com
# www.myoneart.com
#

import os
import subprocess
import sys
from datetime import datetime
from backup import BackupManager

GITHUB_REPO = "https://github.com/moa-digitalagency/MeeSpot.git"
LOG_FILE = f"logs/update_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"

class UpdateManager:
    def __init__(self):
        self.log_lines = []
        
    def log(self, message, level="INFO"):
        """Log un message"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        log_line = f"[{timestamp}] [{level}] {message}"
        print(log_line)
        self.log_lines.append(log_line)
        
    def save_log(self):
        """Sauvegarde le log dans un fichier"""
        os.makedirs('logs', exist_ok=True)
        with open(LOG_FILE, 'w') as f:
            f.write('\n'.join(self.log_lines))
        self.log(f"Log sauvegard√©: {LOG_FILE}")
        
    def run_command(self, cmd, description):
        """Ex√©cute une commande et log le r√©sultat"""
        self.log(f"üîÑ {description}...")
        
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            shell=isinstance(cmd, str)
        )
        
        if result.returncode == 0:
            self.log(f"‚úÖ {description} - Succ√®s")
            if result.stdout:
                self.log(f"   Output: {result.stdout.strip()}")
            return True
        else:
            self.log(f"‚ùå {description} - √âchec", "ERROR")
            if result.stderr:
                self.log(f"   Error: {result.stderr.strip()}", "ERROR")
            return False
    
    def check_git_status(self):
        """V√©rifie si on est dans un repo git"""
        if not os.path.exists('.git'):
            self.log("‚ùå Pas un d√©p√¥t Git. Clonage du repo...", "WARNING")
            return False
        return True
    
    def create_backup(self):
        """Cr√©e un backup avant la mise √† jour"""
        self.log("üì¶ Cr√©ation du backup pr√©-mise √† jour...")
        try:
            backup_manager = BackupManager()
            backup_path = backup_manager.create_backup()
            self.log(f"‚úÖ Backup cr√©√©: {backup_path}")
            return True
        except Exception as e:
            self.log(f"‚ùå Erreur lors du backup: {str(e)}", "ERROR")
            return False
    
    def fetch_updates(self):
        """R√©cup√®re les mises √† jour depuis GitHub"""
        commands = [
            (['git', 'fetch', 'origin'], "R√©cup√©ration des mises √† jour"),
            (['git', 'status', '-uno'], "V√©rification du statut"),
        ]
        
        for cmd, desc in commands:
            if not self.run_command(cmd, desc):
                return False
        return True
    
    def check_for_changes(self):
        """V√©rifie s'il y a des changements √† appliquer"""
        result = subprocess.run(
            ['git', 'rev-list', 'HEAD...origin/main', '--count'],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            changes_count = int(result.stdout.strip())
            if changes_count == 0:
                self.log("‚ÑπÔ∏è  Aucune mise √† jour disponible")
                return False
            else:
                self.log(f"üì• {changes_count} commit(s) √† appliquer")
                return True
        return False
    
    def stash_local_changes(self):
        """Sauvegarde les modifications locales"""
        result = subprocess.run(
            ['git', 'status', '--porcelain'],
            capture_output=True,
            text=True
        )
        
        if result.stdout.strip():
            self.log("üíæ Sauvegarde des modifications locales...")
            return self.run_command(
                ['git', 'stash', 'push', '-m', f'Auto-stash before update {datetime.now().isoformat()}'],
                "Stash des modifications locales"
            )
        return True
    
    def pull_updates(self):
        """Applique les mises √† jour"""
        return self.run_command(
            ['git', 'pull', 'origin', 'main', '--rebase'],
            "Application des mises √† jour"
        )
    
    def install_dependencies(self):
        """Installe les d√©pendances Python"""
        return self.run_command(
            [sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt', '--upgrade'],
            "Installation des d√©pendances"
        )
    
    def migrate_database(self):
        """Ex√©cute les migrations de base de donn√©es"""
        self.log("üóÑÔ∏è  Migration de la base de donn√©es...")
        
        # Import du script de migration
        try:
            from migrate_database import DatabaseMigrator
            migrator = DatabaseMigrator()
            migrator.migrate()
            self.log("‚úÖ Migrations appliqu√©es avec succ√®s")
            return True
        except Exception as e:
            self.log(f"‚ùå Erreur lors de la migration: {str(e)}", "ERROR")
            return False
    
    def restart_server(self):
        """Red√©marre le serveur (si g√©r√© par systemd ou PM2)"""
        self.log("üîÑ Le serveur sera red√©marr√© automatiquement par Replit")
        return True
    
    def update(self, skip_backup=False):
        """Processus complet de mise √† jour"""
        self.log("=" * 60)
        self.log("üöÄ D√âMARRAGE DE LA MISE √Ä JOUR DEPUIS GITHUB")
        self.log("=" * 60)
        
        try:
            # 1. V√©rifier git
            if not self.check_git_status():
                self.log("‚ùå Initialisation Git requise", "ERROR")
                return False
            
            # 2. Cr√©er un backup
            if not skip_backup:
                if not self.create_backup():
                    self.log("‚ö†Ô∏è  Backup √©chou√©, continuer quand m√™me? (risqu√©)", "WARNING")
                    # Continuer quand m√™me pour l'automatisation
            
            # 3. V√©rifier les mises √† jour disponibles
            if not self.fetch_updates():
                self.log("‚ùå Impossible de r√©cup√©rer les mises √† jour", "ERROR")
                return False
            
            if not self.check_for_changes():
                self.log("‚úÖ Application d√©j√† √† jour!")
                return True
            
            # 4. Sauvegarder les modifications locales
            if not self.stash_local_changes():
                self.log("‚ùå Impossible de sauvegarder les modifications locales", "ERROR")
                return False
            
            # 5. Appliquer les mises √† jour
            if not self.pull_updates():
                self.log("‚ùå √âchec de la mise √† jour", "ERROR")
                return False
            
            # 6. Installer les d√©pendances
            if not self.install_dependencies():
                self.log("‚ö†Ô∏è  Avertissement: Erreur lors de l'installation des d√©pendances", "WARNING")
            
            # 7. Migrer la base de donn√©es
            if not self.migrate_database():
                self.log("‚ö†Ô∏è  Avertissement: Erreur lors de la migration DB", "WARNING")
            
            # 8. Red√©marrer le serveur
            self.restart_server()
            
            self.log("=" * 60)
            self.log("‚úÖ MISE √Ä JOUR TERMIN√âE AVEC SUCC√àS!")
            self.log("=" * 60)
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå ERREUR CRITIQUE: {str(e)}", "ERROR")
            return False
        finally:
            self.save_log()

if __name__ == '__main__':
    skip_backup = '--skip-backup' in sys.argv
    
    manager = UpdateManager()
    success = manager.update(skip_backup=skip_backup)
    
    sys.exit(0 if success else 1)
