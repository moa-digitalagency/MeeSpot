#!/usr/bin/env python3
"""
Script de v√©rification de la configuration MatchSpot
V√©rifie que toutes les variables d'environnement n√©cessaires sont pr√©sentes
"""

import os
import sys
from dotenv import load_dotenv

def check_env_var(var_name, critical=True):
    """V√©rifie qu'une variable d'environnement existe"""
    value = os.environ.get(var_name)
    if value:
        print(f"‚úÖ {var_name}: Configur√© ({len(value)} caract√®res)")
        return True
    else:
        status = "‚ùå CRITIQUE" if critical else "‚ö†Ô∏è  Optionnel"
        print(f"{status} {var_name}: MANQUANT!")
        return not critical

def main():
    print("=" * 60)
    print("üîç V√©rification de la Configuration MatchSpot")
    print("=" * 60)
    print()
    
    load_dotenv()
    
    print("üì¶ Variables Critiques:")
    print("-" * 60)
    
    all_ok = True
    
    secret_key = os.environ.get('SECRET_KEY') or os.environ.get('SESSION_SECRET')
    if secret_key:
        source = "SECRET_KEY" if os.environ.get('SECRET_KEY') else "SESSION_SECRET"
        print(f"‚úÖ {source}: Configur√© ({len(secret_key)} caract√®res)")
    else:
        print("‚ùå CRITIQUE SECRET_KEY ou SESSION_SECRET: MANQUANT!")
        all_ok = False
    
    all_ok &= check_env_var('ENCRYPTION_KEY', critical=True)
    
    database_url = os.environ.get('DATABASE_URL')
    if database_url:
        print(f"‚úÖ DATABASE_URL: Configur√©")
        if database_url.startswith('postgres://'):
            print("   ‚ö†Ô∏è  Format postgres:// d√©tect√© (sera auto-converti en postgresql://)")
    else:
        print("‚ö†Ô∏è  DATABASE_URL: MANQUANT (tentative construction auto depuis PG* vars)")
        pg_vars = ['PGUSER', 'PGPASSWORD', 'PGHOST', 'PGDATABASE']
        missing = [v for v in pg_vars if not os.environ.get(v)]
        if missing:
            print(f"   ‚ùå Variables PG manquantes: {', '.join(missing)}")
            all_ok = False
        else:
            print(f"   ‚úÖ Toutes les variables PG pr√©sentes (construction auto possible)")
    
    print()
    print("üìä Variables Optionnelles:")
    print("-" * 60)
    
    flask_env = os.environ.get('FLASK_ENV', 'development')
    print(f"‚ÑπÔ∏è  FLASK_ENV: {flask_env}")
    
    print()
    print("=" * 60)
    
    if all_ok:
        print("‚úÖ CONFIGURATION OK - Pr√™t pour le d√©ploiement!")
        print()
        print("üí° Commandes suivantes:")
        print("   - Test local: python main.py")
        print("   - Production: gunicorn --bind 0.0.0.0:5000 main:app")
        return 0
    else:
        print("‚ùå CONFIGURATION INCOMPL√àTE - Corrigez les erreurs ci-dessus")
        print()
        print("üìù Pour corriger:")
        print("   1. Copiez .env.example vers .env")
        print("   2. Remplissez les valeurs manquantes")
        print("   3. Relancez ce script: python verify_config.py")
        return 1

if __name__ == '__main__':
    sys.exit(main())
